package com.github.thatlopesguy.internals.cpu;

import com.github.thatlopesguy.internals.cpu.registers.Accumulator;
import com.github.thatlopesguy.internals.cpu.registers.Register;

/**
 * Model of Sharp LR35902 cpu
 * <p>
 * Created by thatLopesGuy on 25/01/2018.
 */
public class LR35902 {
    //Registers
    private Accumulator regAF = new Accumulator("AF"); //Accumulator and Flags
    private Register regBC = new Register("BC");
    private Register regDE = new Register("DE");
    private Register regHL = new Register("HL");
    private Register regPC = new Register("PC"); // Program Counter
    private Register regSP = new Register("SP"); // Stack Pointer

    //Flags
    private boolean flagZF; //zero flag
    private boolean flagN; //add/sub flag
    private boolean flagH; // half carry flag
    private boolean flagC; //carry flag
    private double ticks = 0;
    //general purpose registers


    public void init() {
        ticks = 0;
    }

    public void run() {
        // fetchOpcode();
        // decodeOpcode();
        // executeOpcode();
        // checkInterupts();

    }


    //****************************************************************
    //private register methods
    //****************************************************************

    private int readByte(int address){
        return 0;//todo
    }

    private void executeOpCode(int opcode) {
        switch (opcode) {
            case 0x00: InstructionExecutorService.nop(); break;
            case 0x01: InstructionExecutorService.load16BitValueToRegister(regBC,value); break;
            case 0x02: InstructionExecutorService.loadAccumulatorToRegisterMemoryAddress(regBC, regAF); break;
            case 0x03: InstructionExecutorService.incrementRegister(regBC); break;
            case 0x04: InstructionExecutorService.incrementRegisterHi(regBC); break;
            case 0x05: InstructionExecutorService.decrementRegisterHi(regBC); break;
            case 0x06: InstructionExecutorService.load8BitToRegisterHi(regBC, value); break;
            case 0x07: InstructionExecutorService.rotateAccumulatorLeftThroughCarry(regAF); break;
            case 0x08: InstructionExecutorService.loadRegisterToMemoryAddress(address, regSP); break;
            case 0x09: InstructionExecutorService.addRegisterToRegister(regHL,regBC); break;
            case 0x0A: InstructionExecutorService.loadRegisterMemoryAddressToAccumulator(regAF,regBC); break;
            case 0x0B: InstructionExecutorService.decrementRegister(regBC); break;
            case 0x0C: InstructionExecutorService.incrementRegisterLo(regBC); break;
            case 0x0D: InstructionExecutorService.decrementRegisterLo(regBC); break;
            case 0x0E: InstructionExecutorService.load8BitToRegisterLo(regBC,value); break;
            case 0x0F: InstructionExecutorService.rotateAccumulatorRightThroughCarry(regAF); break;
            case 0x10: InstructionExecutorService.stop(0); break;
            case 0x11: InstructionExecutorService.load16BitValueToRegister(regDE,value); break;
            case 0x12: InstructionExecutorService.loadAccumulatorToRegisterMemoryAddress(regDE,regAF); break;
            case 0x13: InstructionExecutorService.incrementRegister(regDE); break;
            case 0x14: InstructionExecutorService.incrementRegisterHi(regDE); break;
            case 0x15: InstructionExecutorService.decrementRegisterHi(regDE); break;
            case 0x16: InstructionExecutorService.load8BitToRegisterHi(regDE, value); break;
            case 0x17: InstructionExecutorService.rotateAccumulatorLeft(regAF); break;
            case 0x18: InstructionExecutorService.jumpRelative(regPC,value); break;
            case 0x19: InstructionExecutorService.addRegisterToRegister(regHL, regDE); break;
            case 0x1A: InstructionExecutorService.loadRegisterMemoryAddressToAccumulator(regAF, regDE); break;
            case 0x1B: InstructionExecutorService.decrementRegister(regDE); break;
            case 0x1C: InstructionExecutorService.incrementRegisterLo(regDE); break;
            case 0x1D: InstructionExecutorService.decrementRegisterLo(regDE); break;
            case 0x1E: InstructionExecutorService.load8BitToRegisterLo(regDE, value); break;
            case 0x1F: InstructionExecutorService.rotateAccumulatorRight(regAF); break;
            case 0x20: InstructionExecutorService.jumpRelativeNegativeCondition(regPC,regAF.getZeroFlag(),value); break;
            case 0x21: InstructionExecutorService.load16BitValueToRegister(regDE,value); break;
            case 0x22: InstructionExecutorService.loadAccumulatorToRegisterMemoryAddress(regDE,regAF); break;
            case 0x23: InstructionExecutorService.incrementRegister(regHL); break;
            case 0x24: InstructionExecutorService.incrementRegisterHi(regHL); break;
            case 0x25: InstructionExecutorService.decrementRegisterHi(regHL); break;
            case 0x26: InstructionExecutorService.load8BitToRegisterHi(regHL, value); break;
            case 0x27: InstructionExecutorService.decimalAdjustAccumulator(regAF); break;
            case 0x28: InstructionExecutorService.jumpRelativeCondition(regPC,regAF.getZeroFlag(),value); break;
            case 0x29: InstructionExecutorService.addRegisterToRegister(regHL,regHL); break;
            case 0x2A: InstructionExecutorService.loadRegisterMemoryAddressToAccumulatorIncrement(regAF,regHL); break;
            case 0x2B: InstructionExecutorService.decrementRegister(regHL); break;
            case 0x2C: InstructionExecutorService.incrementRegisterLo(regHL); break;
            case 0x2D: InstructionExecutorService.decrementRegisterLo(regHL); break;
            case 0x2E: InstructionExecutorService.load8BitToRegisterLo(regHL, value); break;
            case 0x2F: InstructionExecutorService.complement(regAF); break;
            case 0x30: InstructionExecutorService.jumpRelativeNegativeCondition(regPC,regAF.getCarryFlag(),value); break;
            case 0x31: InstructionExecutorService.load16BitValueToRegister(regSP, value); break;
            case 0x32: InstructionExecutorService.loadAccumulatorToRegisterMemoryAddressDecrement(regHL, regAF); break;
            case 0x33: InstructionExecutorService.incrementRegister(regSP); break;
            case 0x34: InstructionExecutorService.incrementRegisterMemoryAddress(regHL); break;
            case 0x35: InstructionExecutorService.decrementRegisterMemoryAddress(regHL); break;
            case 0x36: InstructionExecutorService.load8BitToRegisterMemoryAddress(regHL); break;
            case 0x37: InstructionExecutorService.setCarryFlag(regAF); break;
            case 0x38: InstructionExecutorService.jumpRelativeCondition(regPC,regAF.getCarryFlag(),value); break;
            case 0x39: InstructionExecutorService.addRegisterToRegister(regHL, regSP); break;
            case 0x3A: InstructionExecutorService.loadRegisterMemoryAddressToAccumulatorDecrement(regAF,regHL); break;
            case 0x3B: InstructionExecutorService.decrementRegister(regSP); break;
            case 0x3C: InstructionExecutorService.incrementAccumulator(regAF); break;
            case 0x3D: InstructionExecutorService.decrementAccumulator(regAF); break;
            case 0x3E: InstructionExecutorService.load8BitToAccumulator(regAF, value); break;
            case 0x3F: InstructionExecutorService.complementCarryFlag(regAF); break;
            case 0x40: InstructionExecutorService.loadRegisterHiToRegisterHi(regBC,regBC); break;
            case 0x41: InstructionExecutorService.loadRegisterLoToRegisterHi(regBC,regBC); break;
            case 0x42: InstructionExecutorService.loadRegisterHiToRegisterHi(regBC,regDE); break;
            case 0x43: InstructionExecutorService.loadRegisterLoToRegisterHi(regBC,regDE); break;
            case 0x44: InstructionExecutorService.loadRegisterHiToRegisterHi(regBC,regHL); break;
            case 0x45: InstructionExecutorService.loadRegisterLoToRegisterHi(regBC,regHL); break;
            case 0x46: InstructionExecutorService.loadRegisterMemoryAddressToRegisterHi(regBC,regHL); break;
            case 0x47: InstructionExecutorService.loadAccumulatorToRegisterHi(regBC,regAF); break;
            case 0x48: InstructionExecutorService.loadRegisterHiToRegisterLo(regBC,regBC); break;
            case 0x49: InstructionExecutorService.loadRegisterLoToRegisterLo(regBC,regBC); break;
            case 0x4A: InstructionExecutorService.loadRegisterHiToRegisterLo(regBC,regDE); break;
            case 0x4B: InstructionExecutorService.loadRegisterLoToRegisterLo(regBC,regDE); break;
            case 0x4C: InstructionExecutorService.loadRegisterHiToRegisterLo(regBC,regHL); break;
            case 0x4D: InstructionExecutorService.loadRegisterLoToRegisterLo(regBC,regHL); break;
            case 0x4E: InstructionExecutorService.loadRegisterMemoryAddressToRegisterLo(regBC,regHL); break;
            case 0x4F: InstructionExecutorService.loadAccumulatorToRegisterLo(regBC,regAF); break;
            case 0x50: InstructionExecutorService.loadRegisterHiToRegisterHi(regDE,regBC); break;
            case 0x51: InstructionExecutorService.loadRegisterLoToRegisterHi(regDE,regBC); break;
            case 0x52: InstructionExecutorService.loadRegisterHiToRegisterHi(regDE,regDE); break;
            case 0x53: InstructionExecutorService.loadRegisterLoToRegisterHi(regDE,regDE); break;
            case 0x54: InstructionExecutorService.loadRegisterHiToRegisterHi(regDE,regHL); break;
            case 0x55: InstructionExecutorService.loadRegisterLoToRegisterHi(regDE,regHL); break;
            case 0x56: InstructionExecutorService.loadRegisterMemoryAddressToRegisterHi(regDE,regHL); break;
            case 0x57: InstructionExecutorService.loadAccumulatorToRegisterHi(regDE,regAF); break;
            case 0x58: InstructionExecutorService.loadRegisterHiToRegisterLo(regDE,regBC); break;
            case 0x59: InstructionExecutorService.loadRegisterLoToRegisterLo(regDE,regBC); break;
            case 0x5A: InstructionExecutorService.loadRegisterLoToRegisterHi(regDE,regDE); break;
            case 0x5B: InstructionExecutorService.loadRegisterLoToRegisterLo(regDE,regDE); break;
            case 0x5C: InstructionExecutorService.loadRegisterLoToRegisterHi(regDE,regHL); break;
            case 0x5D: InstructionExecutorService.loadRegisterLoToRegisterLo(regDE,regHL); break;
            case 0x5E: InstructionExecutorService.loadRegisterMemoryAddressToRegisterLo(regDE,regHL); break;
            case 0x5F: InstructionExecutorService.loadAccumulatorToRegisterLo(regDE,regAF); break;
            case 0x60: InstructionExecutorService.loadRegisterHiToRegisterHi(regHL,regBC); break;
            case 0x61: InstructionExecutorService.loadRegisterLoToRegisterHi(regHL,regBC); break;
            case 0x62: InstructionExecutorService.loadRegisterHiToRegisterHi(regHL,regDE); break;
            case 0x63: InstructionExecutorService.loadRegisterLoToRegisterHi(regHL,regDE); break;
            case 0x64: InstructionExecutorService.loadRegisterHiToRegisterHi(regHL,regHL); break;
            case 0x65: InstructionExecutorService.loadRegisterLoToRegisterHi(regHL,regHL); break;
            case 0x66: InstructionExecutorService.loadRegisterMemoryAddressToRegisterHi(regHL,regHL); break;
            case 0x67: InstructionExecutorService.loadAccumulatorToRegisterHi(regHL,regAF); break;
            case 0x68: InstructionExecutorService.loadRegisterHiToRegisterLo(regHL,regBC); break;
            case 0x69: InstructionExecutorService.loadRegisterLoToRegisterLo(regHL,regBC); break;
            case 0x6A: InstructionExecutorService.loadRegisterLoToRegisterHi(regHL,regDE); break;
            case 0x6B: InstructionExecutorService.loadRegisterLoToRegisterLo(regHL,regDE); break;
            case 0x6C: InstructionExecutorService.loadRegisterLoToRegisterHi(regHL,regHL); break;
            case 0x6D: InstructionExecutorService.loadRegisterLoToRegisterLo(regHL,regHL); break;
            case 0x6E: InstructionExecutorService.loadRegisterMemoryAddressToRegisterLo(regHL,regHL); break;
            case 0x6F: InstructionExecutorService.loadAccumulatorToRegisterLo(regHL,regAF); break;
            case 0x70: InstructionExecutorService.loadRegisterHiToRegisterMemoryAddress(regHL,regBC); break;
            case 0x71: InstructionExecutorService.loadRegisterLoToRegisterMemoryAddress(regHL,regBC); break;
            case 0x72: InstructionExecutorService.loadRegisterHiToRegisterMemoryAddress(regHL,regDE);  break;
            case 0x73: InstructionExecutorService.loadRegisterLoToRegisterMemoryAddress(regHL,regDE);  break;
            case 0x74: InstructionExecutorService.loadRegisterHiToRegisterMemoryAddress(regHL,regHL);  break;
            case 0x75: InstructionExecutorService.loadRegisterLoToRegisterMemoryAddress(regHL,regHL);  break;
            case 0x76: InstructionExecutorService.halt(); break;
            case 0x77: InstructionExecutorService.loadAccumulatorToRegisterMemoryAddress(regHL,regAF); break;
            case 0x78: InstructionExecutorService.loadRegisterHiToAccumulator(regAF,regBC); break;
            case 0x79: InstructionExecutorService.loadRegisterLoToAccumulator(regAF,regBC); break;
            case 0x7A: InstructionExecutorService.loadRegisterHiToAccumulator(regAF,regDE); break;
            case 0x7B: InstructionExecutorService.loadRegisterLoToAccumulator(regAF,regDE); break;
            case 0x7C: InstructionExecutorService.loadRegisterHiToAccumulator(regAF,regHL); break;
            case 0x7D: InstructionExecutorService.loadRegisterLoToAccumulator(regAF,regHL); break;
            case 0x7E: InstructionExecutorService.loadRegisterMemoryAddressToAccumulator(regAF, regHL); break;
            case 0x7F: InstructionExecutorService.loadAccumulatorToAccumulator(regAF,regAF); break;
            case 0x80: InstructionExecutorService.addRegisterHiToAccumulator(regAF,regBC); break;
            case 0x81: InstructionExecutorService.addRegisterLoToAccumulator(regAF,regBC); break;
            case 0x82: InstructionExecutorService.addRegisterHiToAccumulator(regAF,regDE); break;
            case 0x83: InstructionExecutorService.addRegisterLoToAccumulator(regAF,regDE); break;
            case 0x84: InstructionExecutorService.addRegisterHiToAccumulator(regAF,regHL); break;
            case 0x85: InstructionExecutorService.addRegisterLoToAccumulator(regAF,regHL); break;
            case 0x86: InstructionExecutorService.addRegisterMemoryAddressToAccumulator(regAF,regHL); break;
            case 0x87: InstructionExecutorService.addAccumulatorToAccumulator(regAF); break;
            case 0x88: InstructionExecutorService.addRegisterHiAndCarryToAccumulator(regAF,regBC); break;
            case 0x89: InstructionExecutorService.addRegisterLoAndCarryToAccumulator(regAF,regBC); break;
            case 0x8A: InstructionExecutorService.addRegisterHiAndCarryToAccumulator(regAF,regDE); break;
            case 0x8B: InstructionExecutorService.addRegisterLoAndCarryToAccumulator(regAF,regDE); break;
            case 0x8C: InstructionExecutorService.addRegisterHiAndCarryToAccumulator(regAF,regHL); break;
            case 0x8D: InstructionExecutorService.addRegisterLoAndCarryToAccumulator(regAF,regHL); break;
            case 0x8E: InstructionExecutorService.addRegisterMemoryAddressAndCarryToAccumulator(regAF,regHL); break;
            case 0x8F: InstructionExecutorService.addAccumulatorAndCarryToAccumulator(regAF); break;
            case 0x90: InstructionExecutorService.subRegisterHiFromAccumulator(regAF,regBC); break;
            case 0x91: InstructionExecutorService.subRegisterLoFromAccumulator(regAF,regBC); break;
            case 0x92: InstructionExecutorService.subRegisterHiFromAccumulator(regAF,regDE); break;
            case 0x93: InstructionExecutorService.subRegisterLoFromAccumulator(regAF,regDE); break;
            case 0x94: InstructionExecutorService.subRegisterHiFromAccumulator(regAF,regHL); break;
            case 0x95: InstructionExecutorService.subRegisterLoFromAccumulator(regAF,regHL); break;
            case 0x96: InstructionExecutorService.subRegisterMemoryAddressFromAccumulator(regAF,regHL); break;
            case 0x97: InstructionExecutorService.subAccumulatorFromAccumulator(regAF); break;
            case 0x98: InstructionExecutorService.subRegisterHiAndCarryFromAccumulator(regAF,regBC); break;
            case 0x99: InstructionExecutorService.subRegisterLoAndCarryFromAccumulator(regAF,regBC); break;
            case 0x9A: InstructionExecutorService.subRegisterHiAndCarryFromAccumulator(regAF,regDE); break;
            case 0x9B: InstructionExecutorService.subRegisterLoAndCarryFromAccumulator(regAF,regDE); break;
            case 0x9C: InstructionExecutorService.subRegisterHiAndCarryFromAccumulator(regAF,regHL); break;
            case 0x9D: InstructionExecutorService.subRegisterLoAndCarryFromAccumulator(regAF,regHL); break;
            case 0x9E: InstructionExecutorService.subRegisterMemoryAddressAndCarryFromAccumulator(regAF,regHL); break;
            case 0x9F: InstructionExecutorService.subAccumulatorAndCarryFromAccumulator(regAF); break;
            case 0xA0: InstructionExecutorService.andRegisterHi(regAF,regBC); break;
            case 0xA1: InstructionExecutorService.andRegisterLo(regAF,regBC); break;
            case 0xA2: InstructionExecutorService.andRegisterHi(regAF,regDE); break;
            case 0xA3: InstructionExecutorService.andRegisterLo(regAF,regDE); break;
            case 0xA4: InstructionExecutorService.andRegisterHi(regAF,regHL); break;
            case 0xA5: InstructionExecutorService.andRegisterLo(regAF,regHL); break;
            case 0xA6: InstructionExecutorService.andRegisterMemoryAddress(regAF,regHL); break;
            case 0xA7: InstructionExecutorService.andAccumulator(regAF); break;
            case 0xA8: InstructionExecutorService.xorRegisterHi(regAF,regBC); break;
            case 0xA9: InstructionExecutorService.xorRegisterLo(regAF,regBC); break;
            case 0xAA: InstructionExecutorService.xorRegisterHi(regAF,regDE); break;
            case 0xAB: InstructionExecutorService.xorRegisterLo(regAF,regDE); break;
            case 0xAC: InstructionExecutorService.xorRegisterHi(regAF,regHL); break;
            case 0xAD: InstructionExecutorService.xorRegisterLo(regAF,regHL); break;
            case 0xAE: InstructionExecutorService.xorRegisterMemoryAddress(regAF,regHL); break;
            case 0xAF: InstructionExecutorService.xorAccumulator(regAF); break;
            case 0xB0: InstructionExecutorService.orRegisterHi(regAF,regBC); break;
            case 0xB1: InstructionExecutorService.orRegisterLo(regAF,regBC); break;
            case 0xB2: InstructionExecutorService.orRegisterHi(regAF,regDE); break;
            case 0xB3: InstructionExecutorService.orRegisterLo(regAF,regDE); break;
            case 0xB4: InstructionExecutorService.orRegisterHi(regAF,regHL); break;
            case 0xB5: InstructionExecutorService.orRegisterLo(regAF,regHL); break;
            case 0xB6: InstructionExecutorService.orRegisterMemoryAddress(regAF,regHL); break;
            case 0xB7: InstructionExecutorService.orAccumulator(regAF); break;
            case 0xB8: InstructionExecutorService.compareRegisterHi(regAF,regBC); break;
            case 0xB9: InstructionExecutorService.compareRegisterLo(regAF,regBC); break;
            case 0xBA: InstructionExecutorService.compareRegisterHi(regAF,regDE); break;
            case 0xBB: InstructionExecutorService.compareRegisterLo(regAF,regDE); break;
            case 0xBC: InstructionExecutorService.compareRegisterHi(regAF,regHL); break;
            case 0xBD: InstructionExecutorService.compareRegisterLo(regAF,regHL); break;
            case 0xBE: InstructionExecutorService.compareRegisterMemoryAddress(regAF,regHL); break;
            case 0xBF: InstructionExecutorService.compareAccumulator(regAF); break;
            case 0xC0: InstructionExecutorService.returnNegativeCondition(regPC,regSP,regAF.getZeroFlag()); break;
            case 0xC1: InstructionExecutorService.pop(regBC,regSP); break;
            case 0xC2: InstructionExecutorService.jump16BitRelativeNegativeCondition(regPC,regAF.getZeroFlag(),value); break;
            case 0xC3: InstructionExecutorService.jump16BitRelative(regPC,value); break;
            case 0xC4: InstructionExecutorService.callNegativeCondition(regSP,regPC,regAF.getZeroFlag(),value); break;
            case 0xC5: InstructionExecutorService.push(regSP, regBC); break;
            case 0xC6: InstructionExecutorService.add8BitValueToAccumulator(regAF,value); break;
            case 0xC7: InstructionExecutorService.restart(regSP,regPC,(short)0x00); break;
            case 0xC8: InstructionExecutorService.returnCondition(regPC,regSP,regAF.getZeroFlag()); break;
            case 0xC9: InstructionExecutorService.returnOperation(regPC,regSP); break;
            case 0xCA: InstructionExecutorService.jump16BitRelativeCondition(regPC,regAF.getZeroFlag(),value); break;
            case 0xCC: InstructionExecutorService.callCondition(regSP,regPC,regAF.getZeroFlag(),value); break;
            case 0xCD: InstructionExecutorService.call(regSP,regPC,value); break;
            case 0xCE: InstructionExecutorService.add8BitValueAndCarryToAccumulator(regAF,value); break;
            case 0xCF: InstructionExecutorService.restart(regSP,regPC,(short)0x08); break;
            case 0xD0: InstructionExecutorService.returnNegativeCondition(regPC,regSP,regAF.getCarryFlag()); break;
            case 0xD1: InstructionExecutorService.pop(regDE,regSP); break;
            case 0xD2: InstructionExecutorService.jump16BitRelativeNegativeCondition(regPC,regAF.getCarryFlag(),value); break;
            case 0xD3:  break; //NOP
            case 0xD4: InstructionExecutorService.callNegativeCondition(regSP,regPC,regAF.getCarryFlag(),value); break;
            case 0xD5: InstructionExecutorService.push(regSP,regDE); break;
            case 0xD6: InstructionExecutorService.sub8BitValueFromAccumulator(regAF,value); break;
            case 0xD7: InstructionExecutorService.restart(regSP,regPC,(short) 0x10); break;
            case 0xD8: InstructionExecutorService.returnCondition(regPC,regSP,regAF.getCarryFlag()); break;
            case 0xD9: InstructionExecutorService.returnEnableInterupts(regPC,regSP); break;
            case 0xDA: InstructionExecutorService.jump16BitRelativeCondition(regPC,regAF.getCarryFlag(),value); break;
            case 0xDB:  break; //NOP
            case 0xDC: InstructionExecutorService.callCondition(regSP,regPC,regAF.getCarryFlag(),value); break;
            case 0xDD:  break; //NOP
            case 0xDE: InstructionExecutorService.sub8BitValueAndCarryToAccumulator(regAF,value); break;
            case 0xDF: InstructionExecutorService.restart(regSP,regPC,(short)0x18); break;
            case 0xE0:  break;
            case 0xE1:  break;
            case 0xE2:  break;
            case 0xE3:  break;
            case 0xE4:  break;
            case 0xE5:  break;
            case 0xE6:  break;
            case 0xE7:  break;
            case 0xE8:  break;
            case 0xE9:  break;
            case 0xEA:  break;
            case 0xEB:  break;
            case 0xEC:  break;
            case 0xED:  break;
            case 0xEE:  break;
            case 0xEF:  break;
            case 0xF0:  break;
            case 0xF1:  break;
            case 0xF2:  break;
            case 0xF3:  break;
            case 0xF4:  break;
            case 0xF5:  break;
            case 0xF6:  break;
            case 0xF7:  break;
            case 0xF8:  break;
            case 0xF9:  break;
            case 0xFA:  break;
            case 0xFB:  break;
            case 0xFC:  break;
            case 0xFD:  break;
            case 0xFE:  break;
            case 0xFF:  break;
            case 0xCB:  switch(readByte(regPC.getRegister())){
                case 0x00:  break;
                case 0x01:  break;
                case 0x02:  break;
                case 0x03:  break;
                case 0x04:  break;
                case 0x05:  break;
                case 0x06:  break;
                case 0x07:  break;
                case 0x08:  break;
                case 0x09:  break;
                case 0x0A:  break;
                case 0x0B:  break;
                case 0x0C:  break;
                case 0x0D:  break;
                case 0x0E:  break;
                case 0x0F:  break;
                case 0x10:  break;
                case 0x11:  break;
                case 0x12:  break;
                case 0x13:  break;
                case 0x14:  break;
                case 0x15:  break;
                case 0x16:  break;
                case 0x17:  break;
                case 0x18:  break;
                case 0x19:  break;
                case 0x1A:  break;
                case 0x1B:  break;
                case 0x1C:  break;
                case 0x1D:  break;
                case 0x1E:  break;
                case 0x1F:  break;
                case 0x20:  break;
                case 0x21:  break;
                case 0x22:  break;
                case 0x23:  break;
                case 0x24:  break;
                case 0x25:  break;
                case 0x26:  break;
                case 0x27:  break;
                case 0x28:  break;
                case 0x29:  break;
                case 0x2A:  break;
                case 0x2B:  break;
                case 0x2C:  break;
                case 0x2D:  break;
                case 0x2E:  break;
                case 0x2F:  break;
                case 0x30:  break;
                case 0x31:  break;
                case 0x32:  break;
                case 0x33:  break;
                case 0x34:  break;
                case 0x35:  break;
                case 0x36:  break;
                case 0x37:  break;
                case 0x38:  break;
                case 0x39:  break;
                case 0x3A:  break;
                case 0x3B:  break;
                case 0x3C:  break;
                case 0x3D:  break;
                case 0x3E:  break;
                case 0x3F:  break;
                case 0x40:  break;
                case 0x41:  break;
                case 0x42:  break;
                case 0x43:  break;
                case 0x44:  break;
                case 0x45:  break;
                case 0x46:  break;
                case 0x47:  break;
                case 0x48:  break;
                case 0x49:  break;
                case 0x4A:  break;
                case 0x4B:  break;
                case 0x4C:  break;
                case 0x4D:  break;
                case 0x4E:  break;
                case 0x4F:  break;
                case 0x50:  break;
                case 0x51:  break;
                case 0x52:  break;
                case 0x53:  break;
                case 0x54:  break;
                case 0x55:  break;
                case 0x56:  break;
                case 0x57:  break;
                case 0x58:  break;
                case 0x59:  break;
                case 0x5A:  break;
                case 0x5B:  break;
                case 0x5C:  break;
                case 0x5D:  break;
                case 0x5E:  break;
                case 0x5F:  break;
                case 0x60:  break;
                case 0x61:  break;
                case 0x62:  break;
                case 0x63:  break;
                case 0x64:  break;
                case 0x65:  break;
                case 0x66:  break;
                case 0x67:  break;
                case 0x68:  break;
                case 0x69:  break;
                case 0x6A:  break;
                case 0x6B:  break;
                case 0x6C:  break;
                case 0x6D:  break;
                case 0x6E:  break;
                case 0x6F:  break;
                case 0x70:  break;
                case 0x71:  break;
                case 0x72:  break;
                case 0x73:  break;
                case 0x74:  break;
                case 0x75:  break;
                case 0x76:  break;
                case 0x77:  break;
                case 0x78:  break;
                case 0x79:  break;
                case 0x7A:  break;
                case 0x7B:  break;
                case 0x7C:  break;
                case 0x7D:  break;
                case 0x7E:  break;
                case 0x7F:  break;
                case 0x80:  break;
                case 0x81:  break;
                case 0x82:  break;
                case 0x83:  break;
                case 0x84:  break;
                case 0x85:  break;
                case 0x86:  break;
                case 0x87:  break;
                case 0x88:  break;
                case 0x89:  break;
                case 0x8A:  break;
                case 0x8B:  break;
                case 0x8C:  break;
                case 0x8D:  break;
                case 0x8E:  break;
                case 0x8F:  break;
                case 0x90:  break;
                case 0x91:  break;
                case 0x92:  break;
                case 0x93:  break;
                case 0x94:  break;
                case 0x95:  break;
                case 0x96:  break;
                case 0x97:  break;
                case 0x98:  break;
                case 0x99:  break;
                case 0x9A:  break;
                case 0x9B:  break;
                case 0x9C:  break;
                case 0x9D:  break;
                case 0x9E:  break;
                case 0x9F:  break;
                case 0xA0:  break;
                case 0xA1:  break;
                case 0xA2:  break;
                case 0xA3:  break;
                case 0xA4:  break;
                case 0xA5:  break;
                case 0xA6:  break;
                case 0xA7:  break;
                case 0xA8:  break;
                case 0xA9:  break;
                case 0xAA:  break;
                case 0xAB:  break;
                case 0xAC:  break;
                case 0xAD:  break;
                case 0xAE:  break;
                case 0xAF:  break;
                case 0xB0:  break;
                case 0xB1:  break;
                case 0xB2:  break;
                case 0xB3:  break;
                case 0xB4:  break;
                case 0xB5:  break;
                case 0xB6:  break;
                case 0xB7:  break;
                case 0xB8:  break;
                case 0xB9:  break;
                case 0xBA:  break;
                case 0xBB:  break;
                case 0xBC:  break;
                case 0xBD:  break;
                case 0xBE:  break;
                case 0xBF:  break;
                case 0xC0:  break;
                case 0xC1:  break;
                case 0xC2:  break;
                case 0xC3:  break;
                case 0xC4:  break;
                case 0xC5:  break;
                case 0xC6:  break;
                case 0xC7:  break;
                case 0xC8:  break;
                case 0xC9:  break;
                case 0xCA:  break;
                case 0xCB:  break;
                case 0xCC:  break;
                case 0xCD:  break;
                case 0xCE:  break;
                case 0xCF:  break;
                case 0xD0:  break;
                case 0xD1:  break;
                case 0xD2:  break;
                case 0xD3:  break;
                case 0xD4:  break;
                case 0xD5:  break;
                case 0xD6:  break;
                case 0xD7:  break;
                case 0xD8:  break;
                case 0xD9:  break;
                case 0xDA:  break;
                case 0xDB:  break;
                case 0xDC:  break;
                case 0xDD:  break;
                case 0xDE:  break;
                case 0xDF:  break;
                case 0xE0:  break;
                case 0xE1:  break;
                case 0xE2:  break;
                case 0xE3:  break;
                case 0xE4:  break;
                case 0xE5:  break;
                case 0xE6:  break;
                case 0xE7:  break;
                case 0xE8:  break;
                case 0xE9:  break;
                case 0xEA:  break;
                case 0xEB:  break;
                case 0xEC:  break;
                case 0xED:  break;
                case 0xEE:  break;
                case 0xEF:  break;
                case 0xF0:  break;
                case 0xF1:  break;
                case 0xF2:  break;
                case 0xF3:  break;
                case 0xF4:  break;
                case 0xF5:  break;
                case 0xF6:  break;
                case 0xF7:  break;
                case 0xF8:  break;
                case 0xF9:  break;
                case 0xFA:  break;
                case 0xFB:  break;
                case 0xFC:  break;
                case 0xFD:  break;
                case 0xFE:  break;
                case 0xFF:  break;
            } break;

        }

    }
}
